name: Main Build using Docker

on:
  release:
    types:
      - created
    branches:
      - main-2
env:
  # solution path doesn't need slashes unless there it is multiple folders deep
  # solution name does not include extension. .sln is assumed
  SOLUTION_PATH: .
  SOLUTION_FILE: Pepperdash Core
  # Do not edit this, we're just creating it here
  VERSION: 0.0.0-buildtype-buildnumber
  # Defaults to debug for build type
  BUILD_TYPE: Release
  # Defaults to main as the release branch.  Change as necessary
  RELEASE_BRANCH: main
jobs:
  Build_Project_4-Series:
    runs-on: windows-latest
    steps:
      # First we checkout the source repo
      - name: Checkout repo
        uses: actions/checkout@v3
      # Generate the appropriate version number
      - name: Set Version Number
        shell: powershell
        env:
          TAG_NAME: ${{ github.event.release.tag_name }}
        run: echo "VERSION=$($Env:TAG_NAME)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append   
      - name: Setup MS-Build
        uses: microsoft/setup-msbuild@v1
      - name: restore Nuget Packages
        run: nuget restore .\$($Env:SOLUTION_PATH)\$($Env:SOLUTION_FILE)
      - name: Build Solution        
        run: msbuild .\$($Env:SOLUTION_PATH)\$($Env:SOLUTION_FILE).sln /p:Platform="Any CPU" /p:Configuration="Release" /p:Version="${{ steps.setVersion.outputs.version }}"      
      - name: Update Existing Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          artifacts: '**\*.clz'
          generateReleaseNotes: false
          prerelease: false
          tag: ${{ github.event.release.tag_name }}
      # Upload the build package to the release
#     - name: Upload Release Package
#        id: upload_release
#        uses: actions/upload-release-asset@v1
#       with:
#          upload_url: ${{ github.event.release.upload_url }}
#          asset_path: ./${{ env.SOLUTION_FILE}}-4s-${{ env.VERSION}}.zip
#          asset_name: ${{ env.SOLUTION_FILE}}-4s-${{ env.VERSION}}.zip
#          asset_content_type: application/zip
#        env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Add nuget.exe
        uses: nuget/setup-nuget@v1
      - name: Publish to Nuget
        run: | 
          nuget sources add -name github -source https://nuget.pkg.github.com/pepperdash/index.json -username Pepperdash -password ${{ secrets.GITHUB_TOKEN }}
          nuget setApiKey ${{ secrets.NUGET_API_KEY }}
          nuget push ".\package\PepperDashCore.${{ steps.setVersion.outputs.version }}.nupkg" -Source github
          nuget push ".\package\PepperDashCore.${{ steps.setVersion.outputs.version }}.nupkg" -Source https://api.nuget.org/v3/index.json
